// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { RootGetResponse, GetTodosTodosGetData, GetTodosTodosGetResponse, CreateTodoTodosPostData, CreateTodoTodosPostResponse, GetTodoTodosTodoIdGetData, GetTodoTodosTodoIdGetResponse, UpdateTodoTodosTodoIdPutData, UpdateTodoTodosTodoIdPutResponse, DeleteTodoTodosTodoIdDeleteData, DeleteTodoTodosTodoIdDeleteResponse, SearchTodosTodosSearchGetData, SearchTodosTodosSearchGetResponse } from './types.gen';

export class DefaultService {
    /**
     * Root
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static rootGet(): CancelablePromise<RootGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/'
        });
    }
    
    /**
     * Get Todos
     * Get all todos with pagination
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns Todo Successful Response
     * @throws ApiError
     */
    public static getTodosTodosGet(data: GetTodosTodosGetData = {}): CancelablePromise<GetTodosTodosGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/todos',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Todo
     * Create a new todo
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Todo Successful Response
     * @throws ApiError
     */
    public static createTodoTodosPost(data: CreateTodoTodosPostData): CancelablePromise<CreateTodoTodosPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/todos',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Todo
     * Get a specific todo by ID
     * @param data The data for the request.
     * @param data.todoId
     * @returns Todo Successful Response
     * @throws ApiError
     */
    public static getTodoTodosTodoIdGet(data: GetTodoTodosTodoIdGetData): CancelablePromise<GetTodoTodosTodoIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/todos/{todo_id}',
            path: {
                todo_id: data.todoId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Todo
     * Update a todo
     * @param data The data for the request.
     * @param data.todoId
     * @param data.requestBody
     * @returns Todo Successful Response
     * @throws ApiError
     */
    public static updateTodoTodosTodoIdPut(data: UpdateTodoTodosTodoIdPutData): CancelablePromise<UpdateTodoTodosTodoIdPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/todos/{todo_id}',
            path: {
                todo_id: data.todoId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Todo
     * Delete a todo
     * @param data The data for the request.
     * @param data.todoId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteTodoTodosTodoIdDelete(data: DeleteTodoTodosTodoIdDeleteData): CancelablePromise<DeleteTodoTodosTodoIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/todos/{todo_id}',
            path: {
                todo_id: data.todoId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Search Todos
     * Search todos by title or description
     * @param data The data for the request.
     * @param data.q
     * @returns Todo Successful Response
     * @throws ApiError
     */
    public static searchTodosTodosSearchGet(data: SearchTodosTodosSearchGetData): CancelablePromise<SearchTodosTodosSearchGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/todos/search',
            query: {
                q: data.q
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}